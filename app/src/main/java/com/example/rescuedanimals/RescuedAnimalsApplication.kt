package com.example.rescuedanimalsimport android.app.Applicationimport com.example.app.BuildConfigimport com.orhanobut.logger.AndroidLogAdapterimport com.orhanobut.logger.Loggerimport com.orhanobut.logger.PrettyFormatStrategyimport dagger.hilt.android.HiltAndroidApp@HiltAndroidAppclass RescuedAnimalsApplication : Application() {    val LOGTAG: String by lazy {        this.javaClass.name.split(".").last()    }    companion object {//		private val _loadingDialog: MutableLiveData<Event<Boolean>> = MutableLiveData(Event(false))//		val loadingDialog: LiveData<Event<Boolean>>//			get() = _loadingDialog//        var loadingDialog by mutableStateOf(Event(false))    }    override fun onCreate() {        super.onCreate()        setLogger()        Logger.d("appStart")    }    private fun setLogger() {        val formatStrategy = PrettyFormatStrategy.newBuilder()            .showThreadInfo(false)  // (Optional) Whether to show thread info or not. Default true            .methodCount(5)         // (Optional) How many method line to show. Default 2            .methodOffset(5)        // (Optional) Hides internal method calls up to offset. Default 5            .tag("RALOG")       // (Optional) Global tag for every log. Default PRETTY_LOGGER            .build()        Logger.addLogAdapter(object : AndroidLogAdapter(formatStrategy) {            override fun isLoggable(priority: Int, tag: String?): Boolean {                return BuildConfig.DEBUG            }        })    }}